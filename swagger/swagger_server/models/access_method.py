# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccessMethod(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, access_url: AccessURL=None, access_id: str=None, region: str=None):  # noqa: E501
        """AccessMethod - a model defined in Swagger

        :param type: The type of this AccessMethod.  # noqa: E501
        :type type: str
        :param access_url: The access_url of this AccessMethod.  # noqa: E501
        :type access_url: AccessURL
        :param access_id: The access_id of this AccessMethod.  # noqa: E501
        :type access_id: str
        :param region: The region of this AccessMethod.  # noqa: E501
        :type region: str
        """
        self.swagger_types = {
            'type': str,
            'access_url': AccessURL,
            'access_id': str,
            'region': str
        }

        self.attribute_map = {
            'type': 'type',
            'access_url': 'access_url',
            'access_id': 'access_id',
            'region': 'region'
        }

        self._type = type
        self._access_url = access_url
        self._access_id = access_id
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> 'AccessMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccessMethod of this AccessMethod.  # noqa: E501
        :rtype: AccessMethod
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this AccessMethod.

        Type of the access method.  # noqa: E501

        :return: The type of this AccessMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AccessMethod.

        Type of the access method.  # noqa: E501

        :param type: The type of this AccessMethod.
        :type type: str
        """
        allowed_values = ["s3", "gs", "ftp", "gsiftp", "globus", "htsget", "https", "file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def access_url(self) -> AccessURL:
        """Gets the access_url of this AccessMethod.

        An `AccessURL` that can be used to fetch the actual object bytes. Note that at least one of `access_url` and `access_id` must be provided.  # noqa: E501

        :return: The access_url of this AccessMethod.
        :rtype: AccessURL
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url: AccessURL):
        """Sets the access_url of this AccessMethod.

        An `AccessURL` that can be used to fetch the actual object bytes. Note that at least one of `access_url` and `access_id` must be provided.  # noqa: E501

        :param access_url: The access_url of this AccessMethod.
        :type access_url: AccessURL
        """

        self._access_url = access_url

    @property
    def access_id(self) -> str:
        """Gets the access_id of this AccessMethod.

        An arbitrary string to be passed to the `/access` method to get an `AccessURL`. This string must be unique within the scope of a single object. Note that at least one of `access_url` and `access_id` must be provided.  # noqa: E501

        :return: The access_id of this AccessMethod.
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id: str):
        """Sets the access_id of this AccessMethod.

        An arbitrary string to be passed to the `/access` method to get an `AccessURL`. This string must be unique within the scope of a single object. Note that at least one of `access_url` and `access_id` must be provided.  # noqa: E501

        :param access_id: The access_id of this AccessMethod.
        :type access_id: str
        """

        self._access_id = access_id

    @property
    def region(self) -> str:
        """Gets the region of this AccessMethod.

        Name of the region in the cloud service provider that the object belongs to.  # noqa: E501

        :return: The region of this AccessMethod.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this AccessMethod.

        Name of the region in the cloud service provider that the object belongs to.  # noqa: E501

        :param region: The region of this AccessMethod.
        :type region: str
        """

        self._region = region
